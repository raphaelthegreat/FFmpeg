#version 450 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout (set = 0, binding = 0, rgba8) uniform image2D texture;

layout(push_constant, std140) uniform ComputeInfo {
    int level;
    int slice_dim;
};

void haar_block_x_axis(int dim) {
    const int p_offset = dim >> 1;
    for (int y = 0; y < slice_dim; y++) {
        for (int x = 0; x < slice_dim; x += dim) {
            ivec2 coord = ivec2(gl_GlobalInvocationID.xy) * slice_dim + ivec2(x, y);

            // Load the pixels in the current dimXdim block.
            vec4 a = imageLoad(texture, coord);
            vec4 b = imageLoad(texture, coord + ivec2(p_offset, 0));

            // Compute averages between the pixels.
            vec4 lh = b - a;
            vec4 ll = a + (lh / 2.0) + (1.0 / 510.0);
            imageStore(texture, coord, ll);
            imageStore(texture, coord + ivec2(p_offset, 0), lh);
        }
    }
}

void haar_block_y_axis(int dim) {
    const int p_offset = dim >> 1;
    for (int x = 0; x < slice_dim; x++) {
        for (int y = 0; y < slice_dim; y += dim) {
            ivec2 coord = ivec2(gl_GlobalInvocationID.xy) * slice_dim + ivec2(x, y);

            // Load the pixels in the current dimXdim block.
            vec4 a = imageLoad(texture, coord);
            vec4 b = imageLoad(texture, coord + ivec2(0, p_offset));

            // Compute averages between the pixels.
            vec4 lh = b - a;
            vec4 ll = a + (lh / 2.0) + (1.0 / 510.0);
            imageStore(texture, coord, ll);
            imageStore(texture, coord + ivec2(0, p_offset), lh);
        }
    }
}

void main() {
    int dim = int(pow(2, level + 1));
    haar_block_x_axis(dim);
    haar_block_y_axis(dim);
}