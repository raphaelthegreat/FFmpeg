#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_buffer_reference : require

layout(scalar, buffer_reference, buffer_reference_align = 4) buffer DwtCoef {
    int coef_buf[];
};

struct Plane {
    ivec2 dim;
    ivec2 dwt_dim;
};

layout(push_constant, scalar) uniform ComputeInfo {
    int s;
    int diff_offset;
    int level;
    Plane planes[3];
    DwtCoef pbuf[3];
};

void main()
{
    int coord_y = int(gl_GlobalInvocationID.x);
    uint plane_idx = gl_GlobalInvocationID.z;
    ivec2 work_area = planes[plane_idx].dwt_dim;
    int dist = 1 << level;
    if (coord_y >= work_area.y || (coord_y & (dist - 1)) != 0)
        return;

    DwtCoef buf = pbuf[plane_idx];
    ivec2 dwt_area = work_area >> 1;
    int stride = align(planes[plane_idx].dwt_dim.x, 32);
    int start = stride * coord_y;
    
    // Shift in one bit that is used for additional precision
    for (int x = 0; x < work_area.x; x += dist)
        buf.coef_buf[start + x] = buf.coef_buf[start + x] << 1;

    // Lifting stage 2
    for (int x = 0; x < work_area.x - 2 * dist; x += 2 * dist) {
        buf.coef_buf[start + x + dist] -= (buf.coef_buf[start + x] +
                                           buf.coef_buf[start + x + 2 * dist] + 1) >> 1;
    }
    buf.coef_buf[start + work_area.x - dist] -= (2 * buf.coef_buf[start + work_area.x - 2 * dist] + 1) >> 1;

    // Lifting stage 1
    buf.coef_buf[start] += (2 * buf.coef_buf[start + dist] + 2) >> 2;
    for (int x = 2 * dist; x < work_area.x - 2 * dist; x += 2 * dist) {
        buf.coef_buf[start + x] += (buf.coef_buf[start + x - dist] +
                                    buf.coef_buf[start + x + dist] + 2) >> 2;
    }
    buf.coef_buf[start + work_area.x - 2 * dist] += (buf.coef_buf[start + work_area.x - 3 * dist] +
                                                     buf.coef_buf[start + work_area.x - dist] + 2) >> 2;
}