#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_buffer_reference : require

#define DIRAC_MAX_QUANT_INDEX 116
#define MAX_DWT_LEVELS 5

struct SliceArgs {
    int quant_idx;
    int bytes;
    int pb_start;
    int pad;
};

struct Plane {
    ivec2 dim;
    ivec2 dwt_dim;
};

layout(std430, buffer_reference) buffer SliceArgBuf {
    SliceArgs args[];
};
layout(scalar, buffer_reference, buffer_reference_align = 4) buffer QuantLuts {
    int quant[5][4];
    int ff_dirac_qscale_tab[116];
};

layout(push_constant, scalar) uniform ComputeInfo {
    QuantLuts luts;
    SliceArgBuf slice;
    ivec2 num_slices;
    Plane planes[3];
    int wavelet_depth;
    int size_scaler;
    int prefix_bytes;
    int bits_ceil;
    int bits_floor;
};

int count_vc2_ue_uint(uint val)
{
    uint topbit = 1, maxval = 1;
    int bits = 0;
    if (val == 0)
        return 1;
    val++;
    while (val > maxval)
    {
        bits++;
        topbit <<= 1;
        maxval <<= 1;
        maxval |=  1;
    }
    return bits * 2 + 1;
}

int cache[DIRAC_MAX_QUANT_INDEX];
int quants[MAX_DWT_LEVELS][4];
shared int slice_sizes[gl_WorkGroupSize.x];

int subband_coord(int index, int h, int lvl)
{
    int coord = index;
    coord <<= 1;
    coord |= h;
    coord <<= (wavelet_depth-lvl-1);
    return coord;
}

int count_hq_slice(int quant_index)
{
    int bits = 0;
    if (cache[quant_index] != 0)
        return cache[quant_index];

    bits += 8*prefix_bytes;
    bits += 8; /* quant_idx */

    for (int level = 0; level < wavelet_depth; level++)
        for (int orientation = int(level > 0); orientation < 4; orientation++)
            quants[level][orientation] = max(quant_index - luts.quant[level][orientation], 0);

    int slice_index = int(gl_GlobalInvocationID.x);
    ivec2 slice_coord = ivec2(slice_index % num_slices.x, slice_index / num_slices.x);
    for (int p = 0; p < 3; p++)
    {
        int bytes_start = bits >> 3;
        bits += 8;

        const int stride = align(planes[p].dwt_dim.x, 32);
        for (int level = 0; level < wavelet_depth; level++)
        {
            ivec2 band_dim = planes[p].dwt_dim >> (wavelet_depth - level);
            for (int o = int(level > 0); o < 4; o++)
            {
                const int left = band_dim.x * slice_coord.x / num_slices.x;
                const int right = band_dim.x * (slice_coord.x+1) / num_slices.x;
                const int top = band_dim.y * slice_coord.y / num_slices.y;
                const int bottom = band_dim.y * (slice_coord.y+1) / num_slices.y;

                const int q_idx = quants[level][o];
                const int qfactor = luts.ff_dirac_qscale_tab[q_idx];

                const int yh = o >> 1;
                const int xh = o & 1;

                for (int y = top; y < bottom; y++)
                {
                    for (int x = left; x < right; x++)
                    {
                        int sx = subband_coord(x, xh, level);
                        int sy = subband_coord(y, yh, level);
                        int coef = imageLoad(planes0[p], ivec2(sx, sy)).x;
                        uint c_abs = uint(abs(coef));
                        c_abs = (c_abs << 2) / qfactor;
                        bits += count_vc2_ue_uint(c_abs);
                        bits += int(c_abs > 0);
                    }
                }
            }
        }
        bits += align(bits, 8) - bits;
        int bytes_len = (bits >> 3) - bytes_start - 1;
        int pad_s = align(bytes_len, size_scaler) / size_scaler;
        int pad_c = (pad_s * size_scaler) - bytes_len;
        bits += pad_c * 8;
    }

    cache[quant_index] = bits;
    return bits;
}

int ssize_round(int b)
{
    return align(b, size_scaler) + 4 + prefix_bytes;
}

void main()
{
    int slice_index = int(gl_GlobalInvocationID.x);
    int max_index = num_slices.x * num_slices.y;
    if (slice_index >= max_index)
        return;

    for (int i = 0; i < DIRAC_MAX_QUANT_INDEX; i++)
        cache[i] = 0;

    const int q_ceil = DIRAC_MAX_QUANT_INDEX;
    const int top = bits_ceil;
    const int bottom = bits_floor;
    int quant_buf[2] = int[2](-1, -1);
    int quant = slice.args[slice_index].quant_idx;
    int step = 1;
    int bits_last = 0;
    int bits = count_hq_slice(quant);
    while ((bits > top) || (bits < bottom))
    {
        const int signed_step = bits > top ? +step : -step;
        quant = clamp(quant + signed_step, 0, q_ceil-1);
        bits = count_hq_slice(quant);
        if (quant_buf[1] == quant)
        {
            quant = max(quant_buf[0], quant);
            bits = quant == quant_buf[0] ? bits_last : bits;
            break;
        }
        step = clamp(step / 2, 1, (q_ceil - 1) / 2);
        quant_buf[1] = quant_buf[0];
        quant_buf[0] = quant;
        bits_last = bits;
    }
    int bytes = ssize_round(bits >> 3);
    slice.args[slice_index].quant_idx = clamp(quant, 0, q_ceil-1);
    slice.args[slice_index].bytes = bytes;
    slice_sizes[gl_LocalInvocationIndex] = bytes;
    barrier();

    /* Prefix sum for all slices in current workgroup */
    int total_bytes = 0;
    for (int i = 0; i < gl_LocalInvocationIndex; i++)
        total_bytes += slice_sizes[i];
    slice.args[slice_index].pb_start = total_bytes;
}
