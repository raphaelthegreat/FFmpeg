#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_debug_printf : require

layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

layout(scalar, buffer_reference, buffer_reference_align = 4) buffer DwtCoef {
    int coef_buf[];
};

struct Plane {
    ivec2 dim;
    ivec2 dwt_dim;
    int coef_stride;
    int pad;
};

#define VC2_TRANSFORM_HAAR (3)
#define VC2_TRANSFORM_HAAR_S (4)
#define VC2_TRANSFORM_5_3 (1)

layout(push_constant, scalar) uniform ComputeInfo {
    int s;
    int diff_offset;
    int level;
    int wavelet_type;
    Plane planes[3];
    DwtCoef dst_buf[3];
    DwtCoef src_buf[3];
};

void main() {
    ivec2 coord = ivec2(gl_GlobalInvocationID.xy);

    /* For horizontal synth pass, each invocation handles a horizontal pair of pixels */
    uint plane_idx = gl_GlobalInvocationID.z;
    ivec2 coord_x = coord << ivec2(1, 0);
    ivec2 work_area = planes[plane_idx].dwt_dim >> level;
    ivec2 dwt_area = work_area >> 1;
    if (any(greaterThanEqual(coord_x, work_area))) {
        return;
    }
    int start = planes[plane_idx].dim.x * coord_x.y;
    int a = src_buf[plane_idx].coef_buf[start + coord_x.x];
    int b = src_buf[plane_idx].coef_buf[start + coord_x.x + 1];
    int dst_b = (b - a) * (1 << s);
    int dst_a = a * (1 << s) + ((dst_b + 1) >> 1);
    dst_buf[plane_idx].coef_buf[start + coord_x.x] = dst_a;
    dst_buf[plane_idx].coef_buf[start + coord_x.x + 1] = dst_b;
}
