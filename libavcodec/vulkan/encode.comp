#extension GL_EXT_shader_explicit_arithmetic_types : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_debug_printf : require

// TODO: Process pixels in parallel
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

#define MAX_DWT_LEVELS (5)

struct SliceArgs {
    int quant_idx;
    int bytes;
    int pb_start;
    int pad;
};
layout(std430, buffer_reference, buffer_reference_align = 8) buffer SliceArgBuf {
    SliceArgs args[];
};
layout(scalar, buffer_reference, buffer_reference_align = 4) buffer DwtCoef {
    int coef_buf[];
};
layout(scalar, buffer_reference, buffer_reference_align = 4) buffer BitBuf {
    uint data[];
};
layout(scalar, buffer_reference, buffer_reference_align = 4) buffer QuantLuts {
    int quant[5][4];
    int ff_dirac_qscale_tab[116];
};

layout(push_constant, scalar) uniform ComputeInfo {
    DwtCoef p[4];
    BitBuf pb;
    QuantLuts luts;
    SliceArgBuf slice;
    ivec2 num_slices;
    ivec2 slice_dim;
    int wavelet_depth;
    int quant_idx;
    int size_scaler;
    int prefix_bytes;
};

#define BUF_BITS 32
#define BUF_BYTES 4

int bit_buf = 0;
int bit_left = 32;
int write_start = 0;
int write_ptr = 0;

void put_bits(int n, int value) {
    if (n < bit_left) {
        bit_buf = (bit_buf << n) | value;
        bit_left -= n;
    } else {
        bit_buf <<= bit_left;
        bit_buf |= (value >> (n - bit_left));
        uint data = pack32(unpack8(bit_buf).wzyx);
        pb.data[write_ptr++] = data;
        bit_left += BUF_BITS - n;
        bit_buf = value;
    }
}

void flush_put_bits() {
    int bit_left_lo = (bit_left >> 3) << 3;
    bit_buf <<= (bit_left - bit_left_lo);
    if (bit_left_lo == 0) {
        uint data = pack32(unpack8(bit_buf).wzyx);
        pb.data[write_ptr++] = data;
        bit_buf = 0;
    }
    bit_left = bit_left_lo;
}

int put_bytes_count() {
    return (write_ptr - write_start) * BUF_BYTES + ((BUF_BITS - bit_left) >> 3);
}

/* Same as skip_put_bytes in put_bits.h but fills in 0xFF */
void skip_put_bytes(int n) {
    int bytes_left = bit_left >> 3;
    if (n < bytes_left) {
        int n_bits = n << 3;
        int mask = (1 << n_bits) - 1;
        bit_buf <<= n_bits;
        bit_buf |= mask;
        bit_left -= n_bits;
        return;
    }
    int mask = (1 << bit_left) - 1;
    bit_buf <<= bit_left;
    bit_buf |= mask;
    pb.data[write_ptr++] = pack32(unpack8(bit_buf).wzyx);
    n -= bit_left >> 3;
    int skip_dwords = n >> 2;
    while (skip_dwords > 0) {
        pb.data[write_ptr++] = 0xFFFFFFFF;
        skip_dwords--;
    }
    int skip_bits = (n & 3) << 3;
    bit_buf |= (1 << skip_bits) - 1;
    bit_left = BUF_BITS - skip_bits;
}

void put_vc2_ue_uint(uint val) {
    int pbits = 0, topbit = 1, maxval = 1, bits = 0;
    if (val == 0) {
        put_bits(1, 1);
        return;
    }
    val++;

    while (val > maxval) {
        topbit <<= 1;
        bits++;
        maxval <<= 1;
        maxval |=  1;
    }

    for (int i = 0; i < bits; i++) {
        topbit >>= 1;
        pbits <<= 2;
        if ((val & topbit) != 0) {
            pbits |= 1;
        }
    }

    put_bits(bits * 2 + 1, (pbits << 1) | 1);
}

void encode_subband(ivec2 slice_coord, ivec2 band_size, int quant, int o, int plane) {
    int slice_index = slice_coord.y * int(gl_NumWorkGroups.x) + slice_coord.x;
    int left = band_size.x * (slice_coord.x) / num_slices.x;
    int right = band_size.x * (slice_coord.x+1) / num_slices.x;
    int top = band_size.y * (slice_coord.y) / num_slices.y;
    int bottom = band_size.y * (slice_coord.y+1) / num_slices.y;

    int stride = slice_dim.x * num_slices.x;
    int band_ptr = int(o > 1) * band_size.y * stride + (o & 1) * band_size.x;
    int start = band_ptr + top * stride;

    for (int y = top; y < bottom; y++) {
        for (int x = left; x < right; x++) {
            int coef = p[plane].coef_buf[start + x];
            uint c_abs = uint(abs(coef));
            put_vc2_ue_uint(c_abs);
            if (c_abs != 0) {
                put_bits(1, int(coef < 0));
            }
        }
        start += stride;
    }
}

int align(int x, int a) {
    return (x + a - 1) & ~(a - 1);
}

void main() {
    /* Step 1. TODO: Figure out appropriate quant index for optimal slice size */
    int slice_bytes_max = 1389;

    /* Step 2. Quantize and encode */
    ivec2 slice_coord = ivec2(gl_GlobalInvocationID.xy);
    int slice_index = int(gl_GlobalInvocationID.y * num_slices.x + gl_GlobalInvocationID.x);
    write_ptr = (slice_bytes_max >> 2) * slice_index;
    write_start = write_ptr;

    /* Write quant index for this slice */
    put_bits(8, quant_idx);

    /* Luma + 2 Chroma planes */
    for (int p = 0; p < 3; p++) {
        int pad_s, pad_c;
        int bytes_start = put_bytes_count();
        /* Save current location and write a zero value */
        int write_start = write_ptr;
        int bit_left_start = bit_left;
        put_bits(8, 0);
        for (int level = 0; level < 4; level++) {
            ivec2 band_size = (slice_dim * num_slices) >> (wavelet_depth - level);
            for (int orientation = int(level > 0); orientation < 4; orientation++) {
                encode_subband(slice_coord, band_size, luts.quant[level][orientation],
                               orientation, p);
            }
        }
        flush_put_bits();
        int bytes_len = put_bytes_count() - bytes_start - 1;
        if (p == 2) {
            int len_diff = slice_bytes_max - put_bytes_count();
            pad_s = align((bytes_len + len_diff), size_scaler)/size_scaler;
            pad_c = (pad_s*size_scaler) - bytes_len;
        } else {
            pad_s = align(bytes_len, size_scaler)/size_scaler;
            pad_c = (pad_s*size_scaler) - bytes_len;
        }
        pb.data[write_start] |= (pad_s & 0xFF) << (BUF_BITS - bit_left_start);
        /* vc2-reference uses that padding that decodes to '0' coeffs */
        skip_put_bytes(pad_c);
    }
}